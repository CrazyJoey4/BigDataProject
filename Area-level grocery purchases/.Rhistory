library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(data.table)
library(tidyverse)
library(readr)
library(magrittr)
list_csv_files <- list.files(path = "Validation data (obesity, diabetes)/")
df2 = do.call(rbind, lapply(list_csv_files, function(x) read.csv(x, stringsAsFactors = FALSE)))
df2
list_csv_files <- list.files(path = "/Validation data (obesity, diabetes)/")
#change directory
setwd("~/BigData/BigDataProject")
list_csv_files <- list.files(path = "/Validation data (obesity, diabetes)/")
list_csv_files <- list.files(path = "./Validation data (obesity, diabetes)/")
df2 = do.call(rbind, lapply(list_csv_files, function(x) read.csv(x, stringsAsFactors = FALSE)))
file.exists("./Validation data (obesity, diabetes)/*.csv")
file.exists("./Validation data (obesity, diabetes)/child_obesity_london_borough_2015-2016.csv")
file.exists("./Validation data (obesity, diabetes)/child_obesity_london_ward_2013-2014.csv")
file.exists("./Validation data (obesity, diabetes)/")
file.exists("/Validation data (obesity, diabetes)/")
file.exists("/Validation data (obesity, diabetes)")
#Grocery
year_osward_grocery<-read.csv("./BigDataProject/Area-level grocery purchases/year_osward_grocery.csv")
#Grocery
year_osward_grocery<-read.csv("./Area-level grocery purchases/year_osward_grocery.csv")
#Health Data
diabetes_estimates_osward_2016<-read.csv("./Validation data (obesity, diabetes)/diabetes_estimates_osward_2016.csv")
# Using read.csv()
list_csv_files <- list.files(path = "./Validation data (obesity, diabetes)/")
df2 = do.call(rbind, lapply(list_csv_files, function(x) read.csv(x, stringsAsFactors = FALSE)))
df2
df <-
list.files(path = "Validation data (obesity, diabetes)/", pattern = "*.csv") %>%
map_df(~read_csv(.))
df
list_csv_files <- list.files(path = "./Validation data (obesity, diabetes)/")
df2 = do.call(rbind, lapply(list_csv_files, function(x) read.csv(x, stringsAsFactors = FALSE)))
df2
# Using read.csv()
list_csv_files <- list.files(path = "./Validation data (obesity, diabetes)/")
df <-
list.files(path = "Area-level grocery purchases/", pattern = "*.csv") %>%
map_df(~read_csv(.))
ListFile <-
list.files(path="/Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE)
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE)
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE) %>%
map_df(~read_csv(.))
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE) %>%
map_df(~read_csv(.))
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE) %>%
map_df(~read_csv(list.files))
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE) %>%
map_df(~read_csv(list.files))
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE) %>%
map_df(~read_csv("list.files"))
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE) %>%
map_df(~read_csv(./Area-level grocery purchases/))
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE)
df2 = do.call(rbind, lapply(list_csv_files, function(x) read.csv(x, stringsAsFactors = FALSE)))
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE)
df2 = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
df2 = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("~/BigData/BigDataProject/Area-level grocery purchases")
ListFile <-
list.files(path="./Area-level grocery purchases/", pattern="*.csv", all.files=TRUE, full.names=FALSE)
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
df2 = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
#Import Health Data
setwd("~/BigData/BigDataProject/Validation data (obesity, diabetes)")
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
HData = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
#Import Grocery Purchases
setwd("~/BigData/BigDataProject/Area-level grocery purchases")
ListFile2 <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
GPData = do.call(rbind, lapply(ListFile2, function(x) read.csv(x, stringsAsFactors = FALSE)))
setwd("~/BigData/BigDataProject/Validation data (obesity, diabetes)")
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
HData = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
#Import Health Data
setwd("~/BigData/BigDataProject/Validation data (obesity, diabetes)")
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
HData = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
HData = do.call(bind_rows, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
rlang::last_error()
#Import Grocery Purchases
setwd("~/BigData/BigDataProject/Area-level grocery purchases")
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
GPData = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
set.seed(2017)
n <- 10000
p <- 100
X <- matrix(rnorm(n*p), n, p)
y <- X %*% rnorm(p) + rnorm(100)
check_for_equal_coefs <- function(GPData) {
tol <- 1e-12
max_error <- max(c(abs(values[[1]] - values[[2]]),
abs(values[[2]] - values[[3]]),
abs(values[[1]] - values[[3]])))
max_error < tol
}
mbm <- microbenchmark("lm" = { b <- lm(y ~ X + 0)$coef },
"pseudoinverse" = {
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
b <- solve(t(X) %*% X, t(X) %*% y)
},
check = check_for_equal_coefs)
mbm
library(ggplot2)
autoplot(mbm)
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
set.seed(2017)
n <- 10000
p <- 100
X <- matrix(rnorm(n*p), n, p)
y <- X %*% rnorm(p) + rnorm(100)
check_for_equal_coefs <- function(GPData) {
tol <- 1e-12
max_error <- max(c(abs(values[[1]] - values[[2]]),
abs(values[[2]] - values[[3]]),
abs(values[[1]] - values[[3]])))
max_error < tol
}
mbm <- microbenchmark("lm" = { b <- lm(y ~ X + 0)$coef },
"pseudoinverse" = {
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
b <- solve(t(X) %*% X, t(X) %*% y)
},
check = check_for_equal_coefs)
mbm
library(ggplot2)
autoplot(mbm)
set.seed(2017)
n <- 10000
p <- 100
X <- matrix(rnorm(n*p), n, p)
y <- X %*% rnorm(p) + rnorm(100)
check_for_equal_coefs <- function(value) {
tol <- 1e-12
max_error <- max(c(abs(values[[1]] - values[[2]]),
abs(values[[2]] - values[[3]]),
abs(values[[1]] - values[[3]])))
max_error < tol
}
mbm <- microbenchmark("lm" = { b <- lm(y ~ X + 0)$coef },
"pseudoinverse" = {
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
b <- solve(t(X) %*% X, t(X) %*% y)
},
check = check_for_equal_coefs)
set.seed(2017)
n <- 10000
p <- 100
X <- matrix(rnorm(n*p), n, p)
y <- X %*% rnorm(p) + rnorm(100)
check_for_equal_coefs <- function(values) {
tol <- 1e-12
max_error <- max(c(abs(values[[1]] - values[[2]]),
abs(values[[2]] - values[[3]]),
abs(values[[1]] - values[[3]])))
max_error < tol
}
mbm <- microbenchmark("lm" = { b <- lm(y ~ X + 0)$coef },
"pseudoinverse" = {
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
b <- solve(t(X) %*% X, t(X) %*% y)
},
check = check_for_equal_coefs)
mbm
library(ggplot2)
autoplot(mbm)
setwd("~/BigData/BigDataProject/Area-level grocery purchases")
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
GPData = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
GPData
set.seed(2017)
n <- 10000
p <- 100
X <- matrix(rnorm(n*p), n, p)
y <- X %*% rnorm(p) + rnorm(100)
check_for_equal_coefs <- function(values) {
tol <- 1e-12
max_error <- max(c(abs(values[[1]] - values[[2]]),
abs(values[[2]] - values[[3]]),
abs(values[[1]] - values[[3]])))
max_error < tol
}
mbm <- microbenchmark("lm" = { b <- lm(y ~ X + 0)$coef },
"pseudoinverse" = {
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
b <- solve(t(X) %*% X, t(X) %*% y)
},
check = check_for_equal_coefs)
mbm
autoplot(mbm)
#Import Grocery Purchases
setwd("~/BigData/BigDataProject/Area-level grocery purchases")
ListFile <-
list.files(path=".", pattern="*.csv", all.files=TRUE, full.names=FALSE)
GPData = do.call(rbind, lapply(ListFile, function(x) read.csv(x, stringsAsFactors = FALSE)))
set.seed(2017)
n <- 10000
p <- 100
X <- matrix(rnorm(n*p), n, p)
y <- X %*% rnorm(p) + rnorm(100)
check_for_equal_coefs <- function(values) {
tol <- 1e-12
max_error <- max(c(abs(values[[1]] - values[[2]]),
abs(values[[2]] - values[[3]]),
abs(values[[1]] - values[[3]])))
max_error < tol
}
mbm <- microbenchmark("lm" = { b <- lm(y ~ X + 0)$coef },
"pseudoinverse" = {
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
b <- solve(t(X) %*% X, t(X) %*% y)
},
check = check_for_equal_coefs)
mbm
autoplot(mbm)
set.seed(123)
clustering <- kmeans(input, centers = 4, nstart = 20)
clustering
set.seed(123)
clustering <- kmeans(GPData, centers = 4, nstart = 20)
clustering
clustering <- kmeans(GPData, centers = 4, nstart = 20)
